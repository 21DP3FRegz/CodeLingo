{
    "course_name": "Python Basics for Beginners",
    "description": "An introductory course to Python programming, covering essential concepts for beginners.",
    "language": "English",
    "lessons": [
        {
            "title": "Getting Started with Python",
            "content": "Welcome to Python Basics for Beginners! In this lesson, we'll cover the basics of Python programming language. Python is a high-level, interpreted language known for its simplicity and readability. We'll discuss how to set up Python on your system, basic syntax, and running your first Python program.",
            "examples": [
                "Print 'Hello, World!' in Python.",
                "Assign a variable 'x' with the value 5."
            ],
            "tests": [
                {
                    "question": "What is Python known for?",
                    "options": [
                        "Complexity",
                        "Readability",
                        "Speed",
                        "Low-level features"
                    ],
                    "correct_answer": 1
                },
                {
                    "question": "How do you print 'Hello, World!' in Python?",
                    "options": [
                        "echo 'Hello, World!'",
                        "print('Hello, World!')",
                        "console.log('Hello, World!')",
                        "printf('Hello, World!')"
                    ],
                    "correct_answer": 1
                },
                {
                    "question": "Which keyword is used to assign a value to a variable in Python?",
                    "options": [
                        "let",
                        "var",
                        "assign",
                        "None of the above"
                    ],
                    "correct_answer": 3
                }
            ]
        },
        {
            "title": "Variables and Data Types",
            "content": "In this lesson, we'll explore variables and data types in Python. Variables are used to store data, and Python supports various data types such as integers, floats, strings, booleans, lists, tuples, and dictionaries. We'll learn how to declare variables, assign values, and understand the characteristics of each data type.",
            "examples": [
                "Create a variable 'name' and assign it a string value 'John'.",
                "Assign the value 10 to a variable 'age'."
            ],
            "tests": [
                {
                    "question": "What is the correct syntax to create a variable in Python?",
                    "options": [
                        "variable name = value",
                        "name = value",
                        "var name = value",
                        "let name = value"
                    ],
                    "correct_answer": 1
                },
                {
                    "question": "Which data type is used to store whole numbers in Python?",
                    "options": [
                        "int",
                        "float",
                        "string",
                        "bool"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "How do you create a list in Python?",
                    "options": [
                        "(1, 2, 3)",
                        "[1, 2, 3]",
                        "{1, 2, 3}",
                        "{'a': 1, 'b': 2, 'c': 3}"
                    ],
                    "correct_answer": 1
                }
            ]
        },
        {
            "title": "Basic Operators and Expressions",
            "content": "Operators are essential for performing operations in Python. In this lesson, we'll delve into arithmetic, comparison, logical, assignment, and identity operators. We'll see how to use these operators to perform basic calculations, compare values, and make decisions based on conditions.",
            "examples": [
                "Add two numbers: 5 and 3.",
                "Check if a is equal to b."
            ],
            "tests": [
                {
                    "question": "What is the result of 5 + 3?",
                    "options": [
                        "8",
                        "15",
                        "53",
                        "2"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "Which operator is used to check if two values are equal in Python?",
                    "options": [
                        "==",
                        "=",
                        "!=",
                        "<>"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "What is the result of the expression: True and False?",
                    "options": [
                        "True",
                        "False",
                        "Error",
                        "None of the above"
                    ],
                    "correct_answer": 1
                }
            ]
        },
        {
            "title": "Control Flow and Conditional Statements",
            "content": "Control flow statements like if, elif, and else are crucial for controlling the flow of execution in Python programs. We'll learn how to use these statements to make decisions based on conditions, execute specific blocks of code, and handle different scenarios.",
            "examples": [
                "Check if a number is positive, negative, or zero.",
                "Determine if a person is eligible to vote."
            ],
            "tests": [
                {
                    "question": "What is the purpose of the 'if' statement?",
                    "options": [
                        "To execute a block of code if a condition is true",
                        "To loop through code",
                        "To define a function",
                        "To import a module"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "Which keyword is used to define multiple conditions in Python?",
                    "options": [
                        "elsif",
                        "elseif",
                        "elif",
                        "else if"
                    ],
                    "correct_answer": 2
                },
                {
                    "question": "What is the result of the expression: 10 > 5?",
                    "options": [
                        "True",
                        "False",
                        "Error",
                        "None of the above"
                    ],
                    "correct_answer": 0
                }
            ]
        },
        {
            "title": "Loops",
            "content": "Loops are used to repeat a block of code multiple times. In Python, we have 'for' and 'while' loops. In this lesson, we'll explore how to use loops to iterate over sequences, perform repetitive tasks, and control the flow of execution based on conditions.",
            "examples": [
                "Print numbers from 1 to 5 using a 'for' loop.",
                "Calculate the factorial of a number using a 'while' loop."
            ],
            "tests": [
                {
                    "question": "Which loop is used when the number of iterations is known?",
                    "options": [
                        "for",
                        "while",
                        "do-while",
                        "None of the above"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "What is the output of the following code?\n\n```python\nfor i in range(3):\n    print(i)\n```",
                    "options": [
                        "0 1 2",
                        "1 2 3",
                        "0 1 2 3",
                        "1 2 3 4"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "When does a 'while' loop stop executing?",
                    "options": [
                        "When the condition is true",
                        "When the condition is false",
                        "After a specific number of iterations",
                        "Never"
                    ],
                    "correct_answer": 1
                }
            ]
        },
        {
            "title": "Functions",
            "content": "Functions are fundamental for organizing code into reusable blocks. In this lesson, we'll learn how to define and call functions in Python, pass arguments, and return values. We'll also explore the scope of variables within functions and understand the importance of modular programming.",
            "examples": [
                "Create a function to add two numbers.",
                "Define a function to check if a number is prime."
            ],
            "tests": [
                {
                    "question": "What is a function?",
                    "options": [
                        "A block of code that performs a specific task",
                        "A variable",
                        "A loop",
                        "A class"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "Which keyword is used to define a function in Python?",
                    "options": [
                        "function",
                        "def",
                        "define",
                        "fun"
                    ],
                    "correct_answer": 1
                },
                {
                    "question": "What is the purpose of a return statement in a function?",
                    "options": [
                        "To exit the function and return a value",
                        "To print a value",
                        "To define a variable",
                        "To import a module"
                    ],
                    "correct_answer": 0
                }
            ]
        },
        {
            "title": "Lists and Tuples",
            "content": "Lists and tuples are data structures used to store collections of items in Python. In this lesson, we'll delve into creating, accessing, and manipulating lists and tuples. We'll explore the differences between these two data structures and when to use each of them.",
            "examples": [
                "Create a list of numbers: 1, 2, and 3.",
                "Create a tuple of fruits: 'apple', 'banana', and 'orange'."
            ],
            "tests": [
                {
                    "question": "What is the difference between a list and a tuple?",
                    "options": [
                        "Lists are mutable, tuples are immutable",
                        "Lists are immutable, tuples are mutable",
                        "Both are mutable",
                        "Both are immutable"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "How do you access the third element of a list or tuple?",
                    "options": [
                        "list[3]",
                        "list(3)",
                        "list(2)",
                        "list[2]"
                    ],
                    "correct_answer": 3
                },
                {
                    "question": "Which method is used to add an element to the end of a list?",
                    "options": [
                        "add()",
                        "append()",
                        "insert()",
                        "push()"
                    ],
                    "correct_answer": 1
                }
            ]
        },
        {
            "title": "Dictionaries",
            "content": "Dictionaries are another essential data structure in Python used to store key-value pairs. In this lesson, we'll learn how to create, access, and manipulate dictionaries. We'll explore various methods and operations associated with dictionaries.",
            "examples": [
                "Create a dictionary of student names and their corresponding ages.",
                "Access the age of a student named 'John'."
            ],
            "tests": [
                {
                    "question": "How are elements stored in a dictionary?",
                    "options": [
                        "In order of insertion",
                        "In alphabetical order",
                        "Randomly",
                        "Based on their keys"
                    ],
                    "correct_answer": 3
                },
                {
                    "question": "How do you access the value of a specific key in a dictionary?",
                    "options": [
                        "dictionary[key]",
                        "dictionary.value(key)",
                        "dictionary[key].value",
                        "dictionary.get(key)"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "Which method is used to remove a key-value pair from a dictionary?",
                    "options": [
                        "remove()",
                        "delete()",
                        "pop()",
                        "discard()"
                    ],
                    "correct_answer": 2
                }
            ]
        },
        {
            "title": "Strings",
            "content": "Strings are used to represent text data in Python. In this lesson, we'll explore string manipulation, indexing, slicing, and various string methods. We'll learn how to concatenate, format, and manipulate strings to perform common tasks.",
            "examples": [
                "Create a string containing the text: 'Hello, World!'",
                "Access the third character of a string."
            ],
            "tests": [
                {
                    "question": "What is the correct way to define a string in Python?",
                    "options": [
                        "'Hello, World!'",
                        "\"Hello, World!\"",
                        "'''Hello, World!'''",
                        "All of the above"
                    ],
                    "correct_answer": 3
                },
                {
                    "question": "How do you access the fourth character of a string?",
                    "options": [
                        "string(4)",
                        "string[3]",
                        "string[4]",
                        "string.get(4)"
                    ],
                    "correct_answer": 1
                },
                {
                    "question": "Which method is used to concatenate two strings?",
                    "options": [
                        "join()",
                        "concat()",
                        "add()",
                        "None of the above"
                    ],
                    "correct_answer": 3
                }
            ]
        },
        {
            "title": "File Handling",
            "content": "File handling is crucial for reading from and writing to files in Python. In this lesson, we'll learn how to open, read from, write to, and close files. We'll explore different modes of file opening and various file handling operations.",
            "examples": [
                "Open a file named 'example.txt' in read mode.",
                "Write 'Hello, World!' to a file named 'output.txt'."
            ],
            "tests": [
                {
                    "question": "Which function is used to open a file in Python?",
                    "options": [
                        "open()",
                        "read()",
                        "write()",
                        "close()"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "What is the default mode for opening a file?",
                    "options": [
                        "r",
                        "w",
                        "a",
                        "x"
                    ],
                    "correct_answer": 0
                },
                {
                    "question": "Which method is used to close a file?",
                    "options": [
                        "end()",
                        "stop()",
                        "close()",
                        "exit()"
                    ],
                    "correct_answer": 2
                }
            ]
        },
        {
            "title": "Error Handling",
            "content": "Error handling is essential for handling exceptions and errors that may occur during program execution. In this lesson, we'll learn how to use try, except, else, and finally blocks to handle exceptions gracefully and ensure robust error handling in Python programs.",
            "examples": [
                "Handle a division by zero error.",
                "Catch and display any other errors that occur."
            ],
            "tests": [
                {
                    "question": "Which block is used to catch exceptions in Python?",
                    "options": [
                        "try",
                        "catch",
                        "except",
                        "finally"
                    ],
                    "correct_answer": 2
                },
                {
                    "question": "What is the purpose of the 'finally' block?",
                    "options": [
                        "Runs only if no exception occurs",
                        "Runs only if there is an exception",
                        "Runs regardless of exceptions",
                        "Never runs"
                    ],
                    "correct_answer": 2
                },
                {
                    "question": "Which block is executed if no exceptions occur?",
                    "options": [
                        "try",
                        "except",
                        "else",
                        "finally"
                    ],
                    "correct_answer": 2
                }
            ]
        },
        {
            "title": "Object-Oriented Programming (OOP)",
            "content": "Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes. In this lesson, we'll explore the concepts of classes, objects, attributes, and methods in Python. We'll learn how to define classes, create objects, and implement OOP principles like inheritance, encapsulation, and polymorphism.",
            "examples": [
                "Create a class named 'Person' with attributes 'name' and 'age'.",
                "Define a method 'speak()' in the 'Person' class."
            ],
            "tests": [
                {
                    "question": "What is a class in Python?",
                    "options": [
                        "A function",
                        "A blueprint for objects",
                        "A variable",
                        "A module"
                    ],
                    "correct_answer": 1
                },
                {
                    "question": "What is an object in Python?",
                    "options": [
                        "A function",
                        "An instance of a class",
                        "A variable",
                        "A module"
                    ],
                    "correct_answer": 1
                },
                {
                    "question": "Which keyword is used to define a class in Python?",
                    "options": [
                        "def",
                        "class",
                        "object",
                        "type"
                    ],
                    "correct_answer": 1
                }
            ]
        }
    ]
}
